# 可以自己import我们平台支持的第三方python模块，比如pandas、numpy等。

# 在这个方法中编写任何的初始化逻辑。context对象将会在你的算法策略的任何方法之间做传递。
def init(context):
    context.hs300 = index_components('000300.XSHG')
    # 实时打印日志
    logger.info("RunInfo: {}".format(context.run_info))

# before_trading此函数会在每天策略交易开始前被调用，当天只会被调用一次
def before_trading(context):
    q = query(
        fundamentals.eod_derivative_indicator.market_cap
        ).order_by(
            fundamentals.eod_derivative_indicator.market_cap
            ).filter(
                fundamentals.stockcode.in_(context.hs300)
                ).limit(10)
    
    fund = get_fundamentals(q)
    
    #获得10只股票的名字
    context.stock_list = fund.T.index
    
    print('-----------------------------------------------------------')
    


# 你选择的证券的数据更新将会触发此段逻辑，例如日或分钟历史数据切片或者是实时数据切片更新
def handle_bar(context, bar_dict):
    #卖出
    for stock in context.portfolio.positions.keys():
        if(stock not in context.stock_list):
            order_target_percent(stock,0)
    
    #买入
    for stock in context.stock_list:
        order_target_percent(stock,0.1)

# after_trading函数会在每天交易结束后被调用，当天只会被调用一次
def after_trading(context):
    pass