# 可以自己import我们平台支持的第三方python模块，比如pandas、numpy等。
import pandas as pd
import numpy as np

# 在这个方法中编写任何的初始化逻辑。context对象将会在你的算法策略的任何方法之间做传递。
def init(context):
    # 在context中保存全局变量
    context.quantile = 5
    # 实时打印日志
    scheduler.run_monthly(single_test,tradingday=1)
    
def single_test(context,bar_dict):
    q = query(fundamentals.income_statement.basic_earnings_per_share)
    fund = get_fundamentals(q)
    fund = fund.T
    
    fund['basic_earnings_per_share'] = mad(fund['basic_earnings_per_share'])
    fund['basic_earnings_per_share'] = stand(fund['basic_earnings_per_share'])
    
    data = fund.iloc[:,0]
    
    #按照分位数，进行股票分组回测
    if context.quantile == 1:
        data = data[data <= data.quantile(0.2)]
    elif context.quantile == 2:
        data = data[(data > data.quantile(0.2)) & (data <= data.quantile(0.4))]
    elif context.quantile == 3:
        data = data[(data > data.quantile(0.4)) & (data <= data.quantile(0.6))]
    elif context.quantile == 4:
        data = data[(data > data.quantile(0.6)) & (data <= data.quantile(0.8))]
    elif context.quantile == 5:
        data = data[(data > data.quantile(0.8)) & (data <= data.quantile(1.0))]
        
    context.stock_list = data.index

# before_trading此函数会在每天策略交易开始前被调用，当天只会被调用一次
def before_trading(context):
    pass

# 你选择的证券的数据更新将会触发此段逻辑，例如日或分钟历史数据切片或者是实时数据切片更新
def handle_bar(context, bar_dict):
    
    for stock in context.portfolio.positions.keys():
        if stock not in context.stock_list:
            order_target_percent(stock,0)
            
    weight = 1.0/len(context.stock_list)      
            
    for stock in context.stock_list:
        if stock not in context.portfolio.positions.keys():
            order_target_percent(stock,weight)

# after_trading函数会在每天交易结束后被调用，当天只会被调用一次
def after_trading(context):
    pass

#自己实现标准化
def stand(factor):
    mean = factor.mean()
    std = factor.std()
    
    return (factor - mean)/std

#3、去极值的方法
def mad(factor):
    #1、
    me = np.median(factor)
    
    #2、3、
    mad = np.median(abs(factor - me))
    
    up = me + (3 * 1.4826 * mad)
    down = me - (3 * 1.4826 * mad)
    
    #利用3倍中位数的值去极值
    factor = np.where(factor > up,up,factor)
    factor = np.where(factor < down,down,factor)
    
    return factor
