# 1、获取市值和市净率，去极值，标准化，中性化
# 2、获取市净率小的股票
from sklearn.linear_model import LinearRegression
import numpy as np
import pandas as pd

# 在这个方法中编写任何的初始化逻辑。context对象将会在你的算法策略的任何方法之间做传递。
def init(context):
    # 在context中保存全局变量
    context.s1 = "000001.XSHE"
    # 实时打印日志
    logger.info("RunInfo: {}".format(context.run_info))
    
    scheduler.run_monthly(get_data,tradingday=1)
    
def get_data(context,bar_dict):
    fund = get_fundamentals(query(
        fundamentals.eod_derivative_indicator.pb_ratio,
        fundamentals.eod_derivative_indicator.market_cap
        ))
    
    #logger.info(q)
    context.fund = fund.T
    
    treat_data(context)
    
    #利用市净率进行选股（市净率小的股票表现好）
    context.stock_list = context.fund['pb_ratio'][context.fund['pb_ratio'] <= context.fund['pb_ratio'].quantile(0.2)].index
    
def treat_data(context):
    """市净值因子数据的处理逻辑
    """
    context.fund['pb_ratio'] = mad(context.fund['pb_ratio'])
    context.fund['pb_ratio'] = stand(context.fund['pb_ratio'])
    
    x = context.fund['market_cap'].values.reshape(-1,1)
    y = context.fund['pb_ratio'].values
    
    
    #建立线性回归，中性化处理
    lr = LinearRegression()
    lr.fit(x,y)
    
    y_predict = lr.predict(x)
    
    context.fund['pb_ratio'] = y - y_predict
    
    

# before_trading此函数会在每天策略交易开始前被调用，当天只会被调用一次
def before_trading(context):
    pass


# 你选择的证券的数据更新将会触发此段逻辑，例如日或分钟历史数据切片或者是实时数据切片更新
def handle_bar(context, bar_dict):
    # 开始编写你的主要的算法逻辑
    print(context.stock_list.len())

    for stock in context.portfolio.positions.keys():

        if stock not in context.stock_list:
            order_target_percent(stock, 0)

    weight = 1.0 / len(context.stock_list)

    # 买入
    for stock in context.stock_list:
        order_target_percent(stock, weight)
    

# after_trading函数会在每天交易结束后被调用，当天只会被调用一次
def after_trading(context):
    pass

#去极值
def mad(factor):
    #1、
    me = np.median(factor)
    
    #2、3、
    mad = np.median(abs(factor - me))
    
    up = me + (3 * 1.4826 * mad)
    down = me - (3 * 1.4826 * mad)
    
    #利用3倍中位数的值去极值
    factor = np.where(factor > up,up,factor)
    factor = np.where(factor < down,down,factor)
    
    return factor
    
#自己实现标准化
def stand(factor):
    mean = factor.mean()
    std = factor.std()
    
    return (factor - mean)/std
    
