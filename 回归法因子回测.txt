# 1、回测区间：回归(2014-01-01~2016-01-01)
#           回测2016-01-01  ~  2018-01-01
# 2、选股：
#   选股区间：沪深300
#   选股因子：经过因子分析之后的若干因子，可以不知方向
#   选股权重：回归训练的权重
#   数据处理：缺失值、去极值、标准化、市值中心化处理（防止选股集中）
# 3、调仓周期：
#   调仓：每月进行一次调仓
#   交易规则：卖出已持有的股票
#          买入新的股票池当中的股票

import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression

# 在这个方法中编写任何的初始化逻辑。context对象将会在你的算法策略的任何方法之间做传递。
def init(context):
    context.hs300 = index_components('000300.XSHG')
    
    # 初始化股票因子权重
    context.weights = np.array(
        [-0.01864979, -0.04537212, -0.18487143, -0.06092573, 0.18599453, -0.02088234, 0.03341527, 0.91743347,
         -0.8066782])

    # 定义股票池数量
    context.stocknum = 3
    
    scheduler.run_monthly(regression_select,tradingday=1)

def regression_select(context,bar_dict):
    """回归法预测选股
    """
    #1、查询因子数据
    q = query(
        fundamentals.eod_derivative_indicator.pe_ratio, 
        fundamentals.eod_derivative_indicator.pb_ratio, 
        fundamentals.eod_derivative_indicator.market_cap, 
        fundamentals.financial_indicator.ev, 
        fundamentals.financial_indicator.return_on_asset_net_profit, 
        fundamentals.financial_indicator.du_return_on_equity, 
        fundamentals.financial_indicator.earnings_per_share, 
        fundamentals.income_statement.revenue, 
        fundamentals.income_statement.total_expense
    ).filter(fundamentals.stockcode.in_(context.hs300))
    
    #查询因子数据
    fund = get_fundamentals(q).T
    
    context.factors_data = fund
    
    #2、因子（特征值）数据进行处理
    dealwith_data(context)
    
    #3、根据预测收益率大小来替换股票池
    select_stocklist(context)
    
    #4、根据股票池的股票列表，进行调仓
    rebalance(context)
    
def dealwith_data(context):
    """
    context:包含因子数据
    需要做的处理：去极值，标砖化，因子的市值中性化
    """
    #删除空值
    context.factors_data = context.factors_data.dropna()
    
    #市值因子，去做特征值给其他因子中性化处理
    #市值因子因子不进行去极值、标准化处理
    market_cap_factor = context.factors_data['market_cap'].values
    
    #去极值标准化，循环对每个因子进行处理
    for name in context.factors_data.columns:
        context.factors_data[name] = mad(context.factors_data[name])
        context.factors_data[name] = mad(context.factors_data[name])
        
        #对因子（除了market_cap本身不需要中性化）中性化处理
        #特征值:market_cap_factor
        #目标值：Name的每个因子
        
        if name == 'market_cap':
            continue
            
        #建立回归方程、市值中性化
        lr = LinearRegression()
        lr.fit(market_cap_factor.reshape(-1,1),context.factors_data[name])
        
        y_predict = lr.predict(market_cap_factor.reshape(-1,1))
        #得出误差进行替换原有因子值
        context.factors_data[name] = context.factors_data[name] - y_predict

# before_trading此函数会在每天策略交易开始前被调用，当天只会被调用一次

def select_stocklist(context):
    """回归计算预测，得出收益率结果，筛选收益率高的股票
    """
    #特征值是：context.factors_data
    #系数：因子权重
    #进行矩阵运算，预测收益率
    
    #预测收益率，如果收益高，那么接下来的下一个月都持有收益高的
    stock_return = np.dot(context.factors_data.values,context.weights)
    
    #赋值给因子数据,注意都是默认对应的股票代码和收益率
    context.factors_data['stock_return'] = stock_return
    
    #进行收益率的排序
    context.stock_list = context.factors_data.sort_values(by='stock_return',ascending=False).index[:context.stocknum]
    
def rebalance(context):
    #交易
    # for stock in context.portfolio.positions.keys():
    #     if context.portfolio.positions[stock].quantity > 0:
    #         if stock not in context.stock_list:
    #             order_target_value(stock,0)
    
    # for stock in context.stock_list:
    #     order_target_percent(stock,1.0/context.stocknum)
    print(context.stock_list)

def before_trading(context):
    pass


# 你选择的证券的数据更新将会触发此段逻辑，例如日或分钟历史数据切片或者是实时数据切片更新
def handle_bar(context, bar_dict):
    pass

# after_trading函数会在每天交易结束后被调用，当天只会被调用一次
def after_trading(context):
    pass


#自己实现标准化
def stand(factor):
    mean = factor.mean()
    std = factor.std()
    
    return (factor - mean)/std

#3、去极值的方法
def mad(factor):
    #1、
    me = np.median(factor)
    
    #2、3、
    mad = np.median(abs(factor - me))
    
    up = me + (3 * 1.4826 * mad)
    down = me - (3 * 1.4826 * mad)
    
    #利用3倍中位数的值去极值
    factor = np.where(factor > up,up,factor)
    factor = np.where(factor < down,down,factor)
    
    return factor