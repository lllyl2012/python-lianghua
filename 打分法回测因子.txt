
# - 1、回测区间：
#   - 2010-01-01  ~  2018-01-01
# - 2、选股：
#   - 选股因子：6个已知方向的因子
#     - 市值-market_cap、市盈率-pe_ratio、市净率-pb_ratio
#     - ROIC-return_on_invested_capital、inc_revenue-营业总收入 和inc_profit_before_tax-利润增长率
#   - 数据处理：处理缺失值
#   - 选股权重：
#     - 因子升序从小到大分10组，第几组为所在组得分
#     - 因子降序从大到小分10组，第几组为所在组得分
#   - 选股范围：
#       - 选股的指数、模块：全A股
# - 3、调仓周期：
#   - 调仓：每月进行一次调仓选出20个排名靠前的股票
#   - 交易规则：卖出已持有的股票
#   - 买入新的股票池当中的股票
import pandas as pd
import numpy as np

def init(context):

    context.stocknum = 20

    context.up = ['market_cap', 'pe_ratio', 'pb_ratio']
    
    scheduler.run_monthly(score_select,tradingday=1)
    
def score_select(context,bar_dict):
    q = query(
        fundamentals.eod_derivative_indicator.market_cap,
        fundamentals.eod_derivative_indicator.pe_ratio,
        fundamentals.eod_derivative_indicator.pb_ratio,
        fundamentals.financial_indicator.return_on_invested_capital,
        fundamentals.financial_indicator.inc_revenue,
        fundamentals.financial_indicator.inc_profit_before_tax
        )
    
    fund = get_fundamentals(q)
    
    factor_data = fund.T
    
    factor_data = factor_data.dropna()
    
    #定义打分函数，确定股票池
    select_stocklist(context,factor_data)
    
def select_stocklist(context,factor_data):
    for name in factor_data.columns:
        if name in context.up:
            factor = factor_data.sort_values(by=name)[name]
        else:
            factor = factor_data.sort_values(by=name,ascending=False)[name]
        factor = pd.DataFrame(factor)
        factor[name + 'score'] = 0
        #进行打分
        #先进行每组
        stock_groupnum = len(factor_data)//10
        
        for i in range(10):
            
            if i == 9:
                factor[name+'score'].iloc[i*stock_groupnum:] = i+1
            
            factor[name+'score'].iloc[i*stock_groupnum:(i+1)*stock_groupnum] = i+1
        
        #把每个因子的得分合到原来的因子数据中
        factor_data = pd.concat([factor_data,factor[name+'score']],axis=1)
    
    # logger.info(factors_data)
    # 对6个因子的分数列进行求和,sum(1)按行求和
    all_score = factor_data[
        ['market_capscore', 'pe_ratioscore', 'pb_ratioscore', 'return_on_invested_capitalscore', 'inc_revenuescore',
         'inc_profit_before_taxscore']].sum(1).sort_values()
         
    #定义股票池
    context.stock_list = all_score.index[:context.stocknum]
    
    
def rebalance(context):
    """
    调仓函数
    卖出、买入
    """
    # # 卖出
    # for stock in context.portfolio.positions.keys():

    #     if stock not in context.stock_list:
    #         order_target_percent(stock, 0)

    # # 买入
    # for stock in context.stock_list:
    #     order_target_percent(stock, 1.0 / len(context.stock_list))
    print(context)

# before_trading此函数会在每天策略交易开始前被调用，当天只会被调用一次
def before_trading(context):
    pass


# 你选择的证券的数据更新将会触发此段逻辑，例如日或分钟历史数据切片或者是实时数据切片更新
def handle_bar(context, bar_dict):
    rebalance(context)

# after_trading函数会在每天交易结束后被调用，当天只会被调用一次
def after_trading(context):
    pass